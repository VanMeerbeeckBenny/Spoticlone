@page "/AlbumDetails/{AlbumId:guid}"
@inject IAlbumApiService _albumApiService
@inject ITrackApiService _trackApiService
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime

@if (string.IsNullOrWhiteSpace(error))
{
    if (album != null)
    {
        <header class="d-flex flex-column border-bottom mb-5">
            <div class="d-flex">
                <div class="w-75 text-center d-flex justify-content-center align-items-center">
                    <h1 class="title">@album.Album.Name</h1>
                </div>
                <figure class="small-img">
                    <img class="small-img" src="@album.Album.Image" alt="@album.Album.Name" title="@album.Album.Name" />
                </figure>
            </div>

        </header>
        if (currentTrack == null)
        {
            <TrackList Tracks="album.Tracks"
                       OnDelete="DeleteTrack"
                       OnUpdate="UpdateTrack"
                       OnAdd="AddTrack">
            </TrackList>
            <AlbumList ArtistId="album.Album.ArtistId"
                       OnShowAlbumDetails="ShowDetails">
            </AlbumList>
        }
        else
        {
            <TrackForm Track="currentTrack"
                       OnSave="SaveTrack"
                       OnCancel="Refresh">

            </TrackForm>
        }


    }
    else
    {
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
}
else
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@code {
    private string error;
    private Track currentTrack;
    private AlbumWithTracks album;
    [Parameter]
    public Guid AlbumId { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        var result = await _albumApiService.GetAlbumsWithTracksByIdAsync(AlbumId);
        if (result.IsSucces) album = result.Items.FirstOrDefault();
        else error = result.Error;
        currentTrack = null;
    }

    public async Task ShowDetails(Guid id)
    {
        navigation.NavigateTo($"/AlbumDetails/{id}");
    }

    public void UpdateTrack(Track track)
    {
        currentTrack = track;
    }
    public void AddTrack()
    {
        var track = new Track();
        track.Duration = "00:00";
        track.AlbumId = AlbumId;
        currentTrack = track;

    }

    public async Task DeleteTrack(Guid trackId)
    {
        var result = await _trackApiService.DeleteAsync(trackId);
        if (!result.IsSucces) error = result.Error;
        await JSRuntime.InvokeVoidAsync("hideConfirmDelete", "deletecategorymodal");
        await Refresh();

    }
    public async Task SaveTrack(Track track)
    {
        ItemResultModel<Track> result;

        if (track.Id == Guid.Empty)
        {
            result = await _trackApiService.AddAsync(
            track.Title,
            track.Duration,
            track.Explicit,
            track.TrackNumber,
            track.DiscNumber,
            track.AlbumId
            );
        }
        else
        {
            result = await _trackApiService.UpdateAsync(
            track.Title,
            track.Duration,
            track.Explicit,
            track.TrackNumber,
            track.DiscNumber,
            track.Id,
            track.AlbumId
            );
        }

        if (result.IsSucces)
        {
            await Refresh();
            currentTrack = null;
        }
        else error = result.Error;
    }
}
